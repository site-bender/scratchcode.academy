---
import { Article, collapseWhitespace } from "@sitebender/components";
import Layout from "~layouts/index.astro";
import Glossinator from "~components/Glossinator/index.astro";
import type { PageMeta } from "@sitebender/components/src/types";
import { CHARS } from "~constants";

const { ellipsis: ellip, ldquo, rdquo } = CHARS;

export const metadata: Partial<PageMeta> = {
	author: "Charles F. Munat, coder@scratchcode.academy",
	carbon: {
		beacon: {
			href: "https://digitalbeacon.co/report/scratchcode-academyglossaryj",
			firstCarbon: 0.011,
			grade: "A+",
			repeatCarbon: 0.006,
		},
		ecograder: {
			href: "https://ecograder.com/report/QEm3B8AFxYpIr3AnOlQRNZzv",
			score: 83,
		},
		webCarbon: {
			count: 0.01,
			href: "https://www.websitecarbon.com/website/scratchcode-academy-glossary-j/",
			percentage: 99,
		},
	},
	description: collapseWhitespace(`
		J is for just-in-time: the glossary page for terms beginning with
		J for the ScratchCode website. Craft code is code made with
		skill and ingenuity.
	`),
	keywords: [
		"craft code",
		"glossary",
		"JAMStack",
		"JavaScript",
		"JSON",
		"just-in-time coding",
		"just-in-time learning",
	],
	label: "J is for just-in-time",
	next: "/glossary/k",
	pageTitle: "J is for just-in-time ~ ScratchCode glossary",
	prev: "/glossary/i",
	title: "J is for just-in-time",
};

const { pageTitle, title } = metadata;
---

<Layout {metadata} title={pageTitle}>
	<Article id="main-content" title={title}>
		<Glossinator />
		<dl class="sb-glossary">
			<dt id="jamstack">
				<dfn>Jamstack</dfn> (<abbr title="Jamstack">JAMStack</abbr>)
			</dt><dd>
				Jamstack, previously stylized as <strong>JAMStack</strong>, is a web
				development architecture pattern and solution stack. The acronym {
					ldquo
				}JAM{rdquo}
				 stands for <a href="/glossary/j#javascript" rel="glossary"
					>JavaScript</a
				>,
				<a href="/glossary/a#api" rel="glossary">API</a> and <a
					href="/glossary/h#html"
					rel="glossary">Markup</a
				>
				 (generated by a static site generator) {ellip} The idea of combining
				the use of JavaScript, APIs and markup has existed since the beginnings
				of HTML5.
			</dd><dd>
				In Jamstack websites, the application logic typically resides on the
				<a href="/glossary/c#client-side" rel="glossary">client side</a> (for
				example, an embedded e-commerce checkout service that interacts with
				pre-rendered static content), without being <a
					href="/glossary/t#tight-coupling"
					rel="glossary">tightly coupled</a
				> to a backend server.
			</dd><dd>
				<cite
					>Source: <a
						href="https://en.wikipedia.org/wiki/Jamstack"
						rel="external">Jamstack</a
					></cite
				>
			</dd>
			<dt id="javascript">
				<dfn>JavaScript</dfn> (<abbr title="JavaScript">JS</abbr>)
			</dt><dd>
				<strong>JavaScript</strong> (or {ldquo}JS{rdquo}) is a programming
				language used most often for dynamic <a
					href="/glossary/c#client-side"
					rel="glossary">client side</a
				> scripts on webpages, but it is also often used on the <a
					href="/glossary/s#server-side"
					rel="glossary">server side</a
				>, using a runtime such as Node.js.
			</dd><dd>
				<cite
					>Source: <a
						href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript"
						rel="external">JavaScript</a
					></cite
				>
			</dd>
			<dt id="json">
				<dfn>JavaScript Object Notation</dfn> (<abbr
					title="JavaScript Object Notation">JSON</abbr
				>)
			</dt><dd>
				<strong>JSON</strong> (JavaScript Object Notation) is a lightweight
				data-interchange format. It is easy for humans to read and write. It is
				easy for machines to parse and generate. It is based on a subset of the
				JavaScript Programming Language.
			</dd><dd>
				<cite
					>Source: <a href="https://www.json.org/json-en.html" rel="external"
						>Introducing JSON</a
					></cite
				>
			</dd>
			<dt id="just-in-time-coding">
				<dfn>Just-in-Time Coding</dfn> (<abbr title="just-in-time coding"
					>JITCo</abbr
				>)
			</dt><dd>
				<strong>Just-in-time coding</strong> is inspired by just-in-time (JIT)
				manufacturing. In <a
					href="https://www.investopedia.com/terms/j/jit.asp"
					rel="external">JIT manufacturing</a
				>, instead of building goods to warehouse until sold, goods are produced
				exactly as needed. Ideally, as the customers walk into the store, the
				goods they want are rolling off the assembly line. No warehousing
				necessary.
			</dd><dd>
				Applying this idea to coding is simple: do not leap into coding first
				thing. Wait until the last moment (but no longer) before you write your
				code. And then write only and exactly the code you need. Code written
				prematurely is effectively {ldquo}warehoused{rdquo}.
			</dd><dd>
				More often than not, code written too soon either ends up never being
				used or is discovered to be obsolete or inappropriate, hence must be
				refactored.
			</dd>
			<dt id="just-in-time-learning">
				<dfn>Just-in-Time Learning</dfn> (<abbr title="just-in-time learning"
					>JITL</abbr
				>)
			</dt><dd>
				<strong>Just-in-time learning</strong> is an approach to individual or
				organizational learning and development that promotes need-related
				training be readily available exactly when and how it is needed by the
				learner.
			</dd><dd>
				<cite
					>Source: <a
						href="https://en.wikipedia.org/wiki/Just-in-time_learning"
						rel="external">just-in-time learning</a
					></cite
				>
			</dd>
		</dl>
	</Article>
</Layout>
